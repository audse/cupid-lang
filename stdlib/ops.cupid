trait [t] add = [
	fun [t] add = self, t other => _
]

use add [t: int] with int
use add [t: dec] with dec
use add [t: string] with string

trait [t] subtract = [
	fun [t] subtract = self, t other => _
]

use subtract [t: int] with int
use subtract [t: dec] with dec

trait [t] multiply = [
	fun [t] multiply = self, t other => _
]

use multiply [t: int] with int
use multiply [t: dec] with dec

trait [t] divide = [
	fun [t] divide = self, t other => _
]

use divide [t: int] with int
use divide [t: dec] with dec

trait [t] power = [
	fun [t] power = self, t other => _
]

use power [t: int] with int
use power [t: dec] with dec

trait [t] modulus = [
	fun [t] modulus = self, t other => _
]

use modulus [t: int] with int
use modulus [t: dec] with dec
