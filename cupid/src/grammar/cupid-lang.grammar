- file: expression+
- expression: expression_item

-~expression_item:
	loop
	| block
	| typed_declaration
	| declaration
	| symbol_declaration
	| function
	| assignment
	| operation
	| term

-~loop:
	for_loop
	| while_loop
	| infinite_loop

- for_loop: ~'for' identifier ~'in' term block
- while_loop: ~'while' expression_item block
- infinite_loop: ~'loop' block

- block: 
	if_block
	| brace_block
	| arrow_block
	
- if_block: ~'if' expression block else_if_block* else_block?
- else_if_block: ~'else' ~'if' expression block
- else_block: ~'else' block
-~brace_block: ~'{' expression* closing_brace
-~arrow_block: ~arrow require_expression

- declaration: symbol_declaration ~equal expression_item
- symbol_declaration: keyword_variable 'mut'? identifier
- assignment: identifier equal expression

-~typed_declaration:
	boolean_declaration
	| integer_declaration
	| decimal_declaration
	| string_declaration
	| function_declaration

- boolean_declaration: ~'boo' 'mut'? identifier (~'=' expression)?
- integer_declaration: ~'int' 'mut'? identifier (~'=' expression)?
- decimal_declaration: ~'dec' 'mut'? identifier (~'=' expression)?
- string_declaration: ~'str' 'mut'? identifier (~'=' expression)?
- function_declaration: ~'fun' 'mut'? identifier (~'=' expression)?

-~equal: '=' !'>'

-~term:
	group
	| log
	| function_call
	| boolean
	| none
	| string
	| decimal
	| number
	| identifier
	| comment

- group: ~'(' expression_item closing_paren
- function: parameters block
- parameters: (identifier ~',')*

- log: log_keyword ~'(' arguments closing_paren
- function_call: identifier ~'(' arguments closing_paren
- arguments: (term ~',')*

-~log_keyword: 'log' | 'logs' | 'log_line' | 'logs_line'

-~operation:
	binary_op
	| unary_op
	
- binary_op: term binary_operator require_expression
-~binary_operator: '+' | '-' | '*' | '/' | keyword_operator

- unary_op: unary_operator require_expression
-~unary_operator: '+' | '-'

- boolean: 'true' | 'false'
- none: 'none'
- identifier: !keyword WORD
- string: STRING
- decimal: NUMBER ~'.' NUMBER
- number: NUMBER

# Error handling
-~require_expression: expression_item | <e 'missing expression'>
-~closing_paren: ~')' | <e 'missing closing parenthesis'>
-~closing_brace: ~'}' | <e 'missing closing brace'>

-~keyword:
	keyword_variable
	| keyword_operator
	| keyword_control
	| type
	| boolean
	| none
	| 'for'
	| 'while'
	| 'else'
	| 'if'
	| 'loop'

-~keyword_variable:
	'let'
	| 'const'

-~keyword_operator:
	'in'
	| 'is'
	| 'and'
	| 'not'
	| 'or'
	| '>'
	| '>' '='
	| '<'
	| '<' '='

-~keyword_control:
	'break'
	| 'return'

-arrow: ~'=' ~'>'

- type:
	none
	| 'bool'
	| 'int'
	| 'dec'
	| 'string'
	| 'fun'
	| 'maybe'
	| 'list'
	| 'dict'
	| 'tuple'
	
-~comment_delimiter: '*' '*' '*'
-~comment_content: ANY !comment_delimiter
- comment: ~comment_delimiter comment_content* ANY ~comment_delimiter