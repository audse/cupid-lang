- file: expression+
- expression: comment | statement | term

-~statement:
	type_definition
	| type_alias_definition
	| typed_declaration
	| break
	| return
	| continue
	#| internal_property_assignment
	| property_assignment
	| op_assignment
	| op_increment_assignment
	| assignment
	| log

-~term:
	loop
	| block
	| function
	| function_call
	| map
	| array
	| operation
	| atom
	
-~term_escaped_array:
	loop
	| block
	| function
	| '[' array ']'
	| operation
	| function_call
	| atom

-~loop:
	for_loop
	| while_loop
	| infinite_loop

- for_loop: 'for' for_loop_parameters ~'in' term block
- for_loop_parameters: (identifier ~',')*
- while_loop: 'while' term block
- infinite_loop: 'loop' block

- block: 
	if_block
	| box_block
	| brace_block
	| arrow_block
	
- if_block: ~'if' term block else_if_block* else_block?
- else_if_block: ~'else' ~'if' term block
- else_block: ~'else' block
- box_block: ~'box' brace_block
-~brace_block: ~'{' expression* closing_brace
-~arrow_block: ~arrow expression

- assignment: identifier equal require_term
#- internal_property_assignment: internal_property_access equal require_term
- property_assignment: property_access equal require_term

- op_assignment: identifier operator equal require_term
-~operator: '+' | '-' | '*' | '/' | '^' | '%'
- op_increment_assignment: identifier '+' '+' | identifier '-' '-'

- type_definition: 'type' identifier equal ~'[' (type_field ',')* closing_bracket
- type_alias_definition: 'type' identifier equal type_hint
- type_field: type_hint identifier

- typed_declaration: type_hint 'mut'? identifier (~equal require_term)?

- type_hint: type_id type_hint_details?
-~type_hint_details: '['  (type_hint ',')* ']'
-~type_id: type | identifier

-~equal: '=' !'>'

#-~structure:
#	dictionary
#	| list
#	| range

#-~value:
	#function_call
	#| internal_property_access
	#| property_access
	#| unary_op
	#| atom

-~atom:
	group
	| property_access
	| unary_op
	| boolean
	| none
	| string
	| char
	| decimal
	| number
	| identifier

- group: ~'(' term closing_paren
- function: parameters block
- parameters:  ~'_' | (annotated_parameter ~',')*
- annotated_parameter: type_hint identifier

- log: log_keyword ~'(' arguments closing_paren
- function_call: identifier ~'(' arguments closing_paren
- arguments: (term_escaped_array ~',')*

-~log_keyword: 'log' | 'logs' | 'log_line' | 'logs_line'

- array:  (operation !')' !']' ~',')+

#- list: '[' (term !']' ',')* ']'
#- dictionary: '[' (dictionary_entry !']' ',')* ']'
#- dictionary_entry: term ':' term

- map: '[' (map_entry !']' ',')* ']'
- map_entry: atom ':' term_escaped_array

# - range: 
#	range_inclusive_inclusive
#	| range_inclusive_exclusive
#	| range_exclusive_inclusive
#	| range_exclusive_exclusive

# - range_inclusive_inclusive: '[' atom ~'.' ~'.' atom ']'
# - range_inclusive_exclusive: '[' atom ~'.' ~'.' ']' atom
# - range_exclusive_inclusive: atom '[' ~'.' ~'.' atom ']'
# - range_exclusive_exclusive: atom '[' ~'.' ~'.' ']' atom

# - internal_property_access: 'self' '.' require_property
- property_access: property_accessor '.' require_property
-~property_accessor: map | function_call | identifier | 'self'
-~require_property: atom | <e 'missing index or property identifier'>

-~operation: binary_op

-~binary_op: compare_op

- compare_op: add compare_suffix?
-~compare_suffix: keyword_operator compare_op

- add: multiply add_suffix?
-~add_suffix: '+' add | '-' add

- multiply: exponent multiply_suffix?
-~multiply_suffix: '*' multiply | '/' multiply | '%' multiply

- exponent: atom exponent_suffix?
-~exponent_suffix: '^' exponent

- unary_op: '+' atom | '-' atom

- break: 'break' term?
- return: 'return' term?
- continue: 'continue'

- boolean: 'true' | 'false'
- none: 'none'
- identifier: !keyword WORD
- char: '\\' LETTER 
- string: STRING
- decimal: NUMBER ~'.' NUMBER
- number: NUMBER

# Error handling
-~require_term: term | <e 'missing expression'>
-~closing_paren: ~')' | <e 'missing closing parenthesis'>
-~closing_brace: ~'}' | <e 'missing closing brace'>
-~closing_bracket: ~']' | <e 'missing closing bracket'>

-~keyword:
	keyword_variable
	| keyword_operator
	| reserved_word
	| type
	| boolean
	| none

-~reserved_word:
	'for'
	| 'while'
	| 'else'
	| 'if'
	| 'mut'
	| 'loop'
	| 'box'
	| 'break'
	| 'return'
	| 'continue'
	| 'type'
	| 'log'
	| 'logs'
	| 'log_line'
	| 'logs_line'

-~keyword_variable:
	'let'
	| 'const'

-~keyword_operator:
	'in'
	| 'is'
	| 'and'
	| 'not'
	| 'or'
	| '>'
	| '>' '='
	| '<'
	| '<' '='

- arrow: ~'=' ~'>'

- type:
	none
	| 'bool'
	| 'int'
	| 'dec'
	| 'string'
	| 'fun'
	| 'maybe'
	| 'list'
	| 'dict'
	| 'tuple'
	| 'char'
	| 'array'
	
-~comment_delimiter: '*' '*' '*'
-~comment_content: ANY !comment_delimiter
- comment: ~comment_delimiter comment_content* ANY ~comment_delimiter