- file: expression+
-~expression: package | comment | statement | term

-~statement:
	type_definition
	| trait_definition
	| implement_type
	| implement_trait
	| typed_declaration
	| break
	| return
	| continue
	| op_assignment
	| assignment
	#| property_assignment
	#| property_op_assignment
	| log

-~term:
	loop
	| block
	| function
	| no_op
	#| property_access
	| operation

-~loop:
	for_loop
	| while_loop
	| infinite_loop

- for_loop: 'for' for_loop_parameters ~'in' term block
- for_loop_parameters: list[identifier]
- while_loop: 'while' term block
- infinite_loop: 'loop' block

- block: 
	if_block
	| box_block
	| brace_block
	| arrow_block
	
- if_block: ~'if' term block else_if_block* else_block?
- else_if_block: ~'else' ~'if' term block
- else_block: ~'else' block
- box_block: ~'box' brace_block
-~brace_block: ~'{' expression* closing_brace
-~arrow_block: ~arrow expression

- assignment: identifier equal term
#- property_assignment: property_access equal term

#- property_op_assignment: property_access operator equal term
#- property_access: atom '.' term

- op_assignment: identifier operator equal term
-~operator: '+' | '-' | '*' | '/' | '^' | '%'

-~atom:
	empty
	| builtin_function_call
	| function_call
	| range
	| map
	| bracket_array
	| group
	| unary_op
	| boolean
	| none
	| string
	| char
	| decimal
	| number
	| self
	| identifier

- empty: ~'_'
- group: ~'(' term? closing_paren
- function: parameters  function_body
-~function_body: arrow ~empty | arrow group | block
- parameters: list[parameter]
-~parameter: ~'_' | 'mut'? self | annotated_parameter
- annotated_parameter: type_hint identifier

- log: log_keyword paren[arguments]
- builtin_function_call: =!'.' builtin_function paren[arguments]
- function_call: identifier paren[arguments]
- arguments: list[term]

-~log_keyword: 'log' | 'logs' | 'log_line' | 'logs_line'

- bracket_array: bracket_list[term]

- map: '[' list[map_entry] ']' # not `bracket_list` so that error doesn't come up before trying to make a regular array
- map_entry: atom ':' term

- range: 
	range_inclusive_inclusive
	| range_inclusive_exclusive
	| range_exclusive_inclusive
	| range_exclusive_exclusive

- range_inclusive_inclusive: '[' range_term ~'.' ~'.' range_term ']'
- range_inclusive_exclusive: '[' range_term ~'.' ~'.' ']' range_term
- range_exclusive_inclusive: range_term '[' ~'.' ~'.' range_term ']'
- range_exclusive_exclusive: range_term '[' ~'.' ~'.' ']' range_term
-~range_term: function_call | group | unary_op | number | identifier

# operations can be kinda slow, going through all that, so this is a shortcut
-~no_op: !'-' atom !'.' !operator !keyword_operator

-~operation: binary_op

-~binary_op: type_cast
 
- type_cast: compare_op type_cast_suffix?
-~type_cast_suffix: 'as' type_hint

- compare_op: add compare_suffix?
-~compare_suffix: keyword_operator compare_op

- add: multiply add_suffix?
-~add_suffix: '+' add | '-' add

- multiply: exponent multiply_suffix?
-~multiply_suffix: '*' multiply | '/' multiply | '%' multiply

- exponent: property exponent_suffix?
-~exponent_suffix: '^' exponent

-!property: atom property_suffix?
-~property_suffix: '.' property

- unary_op: '-' atom

- break: 'break' term?
- return: 'return' term?
- continue: 'continue'

- boolean: 'true' | 'false'
- none: 'none'
- char: '\\' LETTER 
- string: STRING
- decimal: NUMBER ~'.' NUMBER
- number: NUMBER

- self: 'self'

-~keyword_operator:
	'in'
	| 'is'
	| 'and'
	| 'not'
	| 'or'
	| 'as'
	| 'istype'
	| '>'
	| '>' '='
	| '<'
	| '<' '='

- arrow: ~'=' ~'>'
	
-~comment_delimiter: '*' '*' '*'
-~comment_content: ANY !comment_delimiter
- comment: ~comment_delimiter comment_content* ANY ~comment_delimiter