type number = [
	int,
	dec,
]

use dec {
	fun [int] 
	sq = _ => self = self ^ 2
	
	fun [int] 
	abs = _ => {
		self = if self > 0.0 => self
			else => -self
	}
	
	fun [int]
	sign = _ => {
		self = if self > 1.0 => 1.0
			else if self < 0.0 => -1.0
			else => 0
	}
	
	fun [int]
	floor = int f => {
		if self < f => self = f
		self
	}
	
	fun [int]
	ceil = int c => {
		if self > c => self = c
		self
	}
	
	fun [bool]
	is_negative = _ => self < 0.0
	
	fun [bool]
	is_positive = _ => self > 0.0
}

use int {
	fun [int] 
	sq = _ => self = self ^ 2
	
	fun [int] 
	abs = _ => {
		self = if self > 0 => self
			else => -self
	}
	
	fun [int]
	sign = _ => {
		self = if self > 1 => 1
			else if self < 0 => -1
			else => 0
	}
	
	fun [int]
	floor = int f => {
		if self < f => self = f
		self
	}
	
	fun [int]
	ceil = int c => {
		if self > c => self = c
		self
	}
	
	fun [bool]
	is_negative = _ => self < 0
	
	fun [bool]
	is_positive = _ => self > 0
}


type [v] iter = [
	array [v] entries,
	int i
]

use [v] iter {

	fun [int]
	size = _ => {
		for i, _ in self.entries => i + 1
	}

	fun [maybe [value: v]]
	next = _ => {
		self.i += 1
		(self.entries).(self.i)
	}
	
	fun [maybe [value: v]] 
	peek = int amount => {
		(self.entries).(self.i + amount)
	}
	
}

iter [v: int] mut myiter = [
	entries: [10, 20, 30, 40, 50],
	i: 0
]