type iterator [
	list items,
	int index,
	fun peek,
	fun log_all,
]

iterator mut my_iter = [
	items: ['a', 'b', 'c'],
	index: 0,
	peek: int amount => {
		list items = self.items
		items.(self.index + amount)
	},
	log_all: _ => for index, item in self.items => {
		string comma = if index is 2 => '' else => ', '
		log (index, ': ', item, comma)
	}
]

fun map = dict dictionary, fun function {
	dict mut copy = dictionary
	for key, value in dictionary => {
		copy.key = function (value)
	}
	copy
}


dict my_dict = [
	a: 1,
	b: 2,
]

dict val = map (my_dict, int val => val * 2)

type dictionary [
	dict entries,
	fun size,
	fun has_key,
	fun keys,
	fun values,
]

dictionary new_dict = [
	entries: [a: 1, b: 2, c: 3],
	
	size: _ => for i, _, _ in self.entries => i + 1,
	
	has_key: string key => for k, _ in self.entries {
		if key is k => break true 
		else => false
	},
	
	keys: _ => [],
	values: _ => []
]

***
type array [
	list entries,
	fun push,
	fun append,
]

array new_array = [
	entries: [0],
	append: list e => {
		self.entries + e
	},
	push: int entry => {
		list new = [entry]
		self.entries + new
		# FIXME self.entries + [entry] doesn't work
	},
]
***

