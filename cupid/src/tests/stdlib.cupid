*** Cupid Standard Library v0.1.0 ***

# struct type
type [k, v] dict = [
	map [k, v] entries,
	fun [v] pop,
	fun [int] size
]

# implementation using generic args
dict [k: int, v: int] num_map = [
	entries: [
		1: 10,
		2: 20,
		3: 30
	],
	pop: _ => {},
	size: _ => {},
]

# sum type
type [k, v] maps = [
	map [k, v],
	array [v],
	array [array [v]]
]

# alias types
type inch = dec
type cm = dec

# sum type of aliases
type unit = [
	inch,
	cm
]

# use sum in place of specific types
fun [dec] double = unit value => value * 2.0
inch mut my_height = 68.5

my_height = 70.0

map [string, string] mut person = [
	first: 'Jacob',
	last: 'Aldred'
]

person.first = 'Jay'

array [int] mut my_nums = 10, 20, 30

my_nums.1 = 'abc'

log (my_nums)