- file: expression+
-~expression: package | comment | expression_item
-~expression_item: statement | term

-~statement:
	type_def
	| trait_def
	| implement_type
	| implement_trait
	| declaration
	| break
	| return
	| continue
	| op_assignment
	| assignment
	| log

-~term:
	loop
	| block
	| function
	| no_op
	| operation

-~loop:
	for_loop
	| while_loop
	| infinite_loop

- for_loop: 'for' for_loop_parameters ~'in' operation block
- for_loop_parameters: list[identifier]
- while_loop: 'while' operation block
- infinite_loop: 'loop' block

- block: 
	if_block
	| box_block
	| brace_block
	| arrow_block
	
- if_block: ~'if' operation block else_if_block* else_block?
- else_if_block: ~'else' ~'if' operation block
- else_block: ~'else' block
- box_block: ~'box' brace_block
-~brace_block: brace_multiple[expression]
-~arrow_block: arrow expression_item

- declaration: 'let' 'mut'? identifier (':' type_hint)? (equal term)?

- assignment: identifier equal term

- op_assignment: identifier operator equal term
-~operator: '+' | '-' | '*' | '/' | '^' | '%'

-~atom:
	empty
	| type_hint type_property_suffix
	| pointer
	| builtin_function_call
	| range
	| map
	| bracket_array
	| group
	| unary_op
	| identifier
	| regex
	| string
	| char
	| decimal
	| number

- pointer: '&' 'mut'? identifier
- empty: '_'
- group: '(' term? closing_paren

- log: log_keyword arguments
- builtin_function_call: =!'.' builtin_function arguments
- arguments: paren_list[term]

-~log_keyword: 'log' | 'logs' | 'log_line' | 'logs_line' | 'debug'

- bracket_array: bracket_list[term]

- map: '[' list[map_entry] ']' # not `bracket_list` so that error doesn't come up before trying to make a regular array
- map_entry: atom ':' term

- range: 
	range_inclusive_inclusive
	| range_inclusive_exclusive
	| range_exclusive_inclusive
	| range_exclusive_exclusive

- range_inclusive_inclusive: '[' range_term ~'.' ~'.' range_term ']'
- range_inclusive_exclusive: '[' range_term ~'.' ~'.' ']' range_term
- range_exclusive_inclusive: range_term '[' ~'.' ~'.' range_term ']'
- range_exclusive_exclusive: range_term '[' ~'.' ~'.' ']' range_term
-~range_term: group | unary_op | number | identifier

# operations can be kinda slow, going through all that, so this is a shortcut
-~no_op: !'-' !'not' atom !':' !',' !'.' !'(' !operator !keyword_operator

-~operation: binary_op

-~binary_op: logic_op

- logic_op: compare_op logic_op_suffix?
-~logic_op_suffix: 'and' logic_op | 'or' logic_op

- compare_op: add compare_suffix?
-~compare_suffix: keyword_operator compare_op

- add: multiply add_suffix?
-~add_suffix: '+' add | '-' add

- multiply: exponent multiply_suffix?
-~multiply_suffix: '*' multiply | '/' multiply | '%' multiply

- exponent: type_cast exponent_suffix?
-~exponent_suffix: '^' exponent

- type_cast: property type_cast_suffix?
-~type_cast_suffix: 'as' type_hint

-!property: function_call property_suffix?
-~property_suffix: '.' property

- function_call: atom arguments?

- unary_op: '-' atom | 'not' atom

- break: 'break' term?
- return: 'return' term?
- continue: 'continue'

- char: '\' '\'? LETTER | '\' '\'
- string: STRING
- decimal: NUMBER ~'.' NUMBER
- number: NUMBER

-~keyword_operator:
	'in'
	| 'is' !'not' !'type'
	| 'is' 'not'
	| 'is' 'type'
	| 'type' 'of'
	| 'and'
	| 'not'
	| 'or'
	| 'as'
	| '>'
	| '>' '='
	| '<'
	| '<' '='

-~arrow: '=' '>'
	
-~comment_delimiter: '*' '*' '*'
-~comment_content: ANY !comment_delimiter
- comment: ~comment_delimiter comment_content* ANY ~comment_delimiter