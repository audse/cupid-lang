fun assert_eq (a, b) {
    if a != b {
        panic('assertion failed', a, b);
    }
}

fun assert_true (a) {
    if !a {
        panic('assertion failed', a);
    }
}

fun assert_false (a) {
    if a {
        panic('assertion failed', a);
    }
}

fun test_arithmetic () {
    log 'Testing arithmetic...';

    assert_eq(2 * 3, 6);
    assert_eq(2 + 3, 5);
    assert_eq(30 - 20, 10);
    assert_eq(100 / 4, 25);

    let a = 25;
    let b = 4;
    assert_eq(100, a * b);

    assert_eq(100 + 2 * 5, 110);
    assert_eq((100 + 2) * 5, 510);
}

fun test_boolean () {
    log 'Testing boolean...';

    assert_true(true);
    assert_true(!false);
    assert_true(true and true);
    assert_false(true and false);
    assert_true(true or false);
    assert_true(false or true);
    assert_true(10 > 5);
    assert_false(10 < 5);
    assert_true(10 >= 5);
    assert_true(10 >= 10);
    assert_false(10 > 10);
}

fun test_strings () {
    log 'Testing strings...';

    let a = 'hello' + ' world';
    assert_eq('hello world', a);
}

fun test_if () {
    log 'Testing if...';

    let a = 0;
    if 5 < 10 {
        a = 1;
    } else {
        a = 2;
    }

    assert_eq(1, a);

    if 5 > 10 {
        a = 1;
    } else {
        a = 2;
    }

    assert_eq(2, a);
}

fun test_loops () {
    log 'Testing loops...';

    let a = 5;
    while (a > 0) {
        a = a - 1;
    }
    assert_eq(0, a);

    let b = 0;
    for (let i = 1; i < 100; i = i + 1) {
        b = b + i;
    }
    assert_eq(4950, b);
}

fun test_functions () {
    log 'Testing functions...';
    fun a () {
        return 1;
    }

    assert_eq(1, a());

    fun b (x, y) {
        return x + y;
    }

    assert_eq(15, b(10, 5));
}

fun test_closures () {
    log 'Testing closures...';
    let result = nil;
    fun makeClosure () {
        let local = 'local';
        fun closure () {
                log '  Local is ' + local;
                result = 'result';
        }
        return closure;
    }

    let closure = makeClosure();
    closure();

    assert_eq('result', result);
}

fun test_closures2 () {
    log 'Testing closures 2...';
    fun makeClosure2 (value) {
        fun closure () {
            log ' ' + value;
        }
        return closure;
    }

    let doughnut = makeClosure2('doughnut');
    let bagel = makeClosure2('bagel');
    doughnut();
    bagel();
}

fun test_gc_trigger () {
    log 'Testing gc trigger...';

    let s = 'hello';
    for (let i = 1; i < 10000; i = i + 1) {
        s = s + 'world';
    }
    log 'end';
}

fun test_class_fields () {
    log 'Testing class fields...';

    class Foo {}

    let foo = Foo();
    foo.name = 'Manuel';
    foo.id = 123;

    assert_eq('Manuel', foo.name);
    assert_eq(123, foo.id);

    foo.id = 456;
    assert_eq(456, foo.id);
}

fun test_class_method () {
    log 'Testing class method...';
    class Scone {
        topping(first, second) {
            log '  scone with ' + first + ' and ' + second;
        }
    }

    let scone = Scone();
    scone.topping('berries', 'cream');
}

fun test_class_this () {
    log 'Testing class self...';
    class Foo {
        method () {
            return self.name;
        }
    }
    let f = Foo();
    f.name = 'manuel';
    assert_eq('manuel', f.method());
}

fun test_class_initializer () {
    log 'Testing class initializer...';

    class CoffeeMaker {
        init (coffee) {
            self.coffee = coffee;
        }
  
        brew () {
            log '  Enjoy your cup of ' + self.coffee;
            self.coffee = 'other';
        }
    }
  
    let maker = CoffeeMaker('coffee and chicory');
    assert_eq('coffee and chicory', maker.coffee);
    maker.brew();
    assert_eq('other', maker.coffee);
}

fun test_class_invoke_non_method () {
    log 'Testing class invoking non method...';

    class Oops {
        init () {
            fun f () {
                return 'not a method';
            }
  
            self.field = f;
        }
    }
  
    let oops = Oops();
    assert_eq('not a method', oops.field());
}

fun test_class_super () {
    log 'Testing class super...';
    class A {
        method () {
            return 'A method';
        }
    }
  
    class B < A {
        method () {
            return 'B method';
        }
  
        test () {
            return super.method();
        }
    }
  
    class C < B {}

    assert_eq('B method', B().method());
    assert_eq('A method', C().test());
}

test_arithmetic();
test_boolean();
test_strings();
test_if();
test_loops();
test_functions();
test_closures();
test_closures2();
test_class_fields();
test_class_method();
test_class_this();
test_class_initializer();
test_class_invoke_non_method();
test_class_super();
test_gc_trigger();


log '++++++++++++++END OF THE TEST+++++++++++++++++++++';