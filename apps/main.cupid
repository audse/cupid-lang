
# Type def

type type! = []
type trait! = []
type none = []
type int = []
type dec = []
type string = []
type array (t) = [t]
type fun = []
type map (k, v) = [k, v]

sum bool = [
	true,
	false
]

sum maybe (t) = [
	yes : t,
	no
]

implement int = [
	pow = left : int, right : int -> int,
	sq = left : int -> int => left.pow(2)
]

# Trait def

trait equal! (t) = [
	equal! = left : t, right : t -> bool => ()
]

# infix 1 'is' = equal! (t)

trait not_equal! (t) = [
	not_equal! = left : t, right : t -> bool => ()
]

# infix 2 'is not' = not_equal! (t)

implement int + equal! = []
implement int + not_equal! = []

type true = bool::true
type false = bool::false

# let my_val : bool = true